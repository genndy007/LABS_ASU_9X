from random import randint, choice
from collections import defaultdict

class Hall:
    def __init__(self, num_places=20):
        self.places = {i: False for i in range(1, num_places+1)}  # Placenum: isbusy

class Dish:
    POSSIBLE_DISHES = {
        'soup':['tomato', 'potato', 'meat'],
        'pizza':['olive', 'flour', 'meat'],
        'omelette':['egg', 'meat', 'tomato'],
        'salad':['tomato', 'cucumber', 'leaf']
    }
    def __init__(self):
        pass

    def get_dishes(self):
        return self.POSSIBLE_DISHES

class Ingredients:
    MAX_CAPACITY = 50
    POSSIBLE_INGS = {
        'tomato': randint(30, 50),
        'potato': randint(30, 50),
        'meat': randint(30, 50), 
        'olive': randint(30, 50), 
        'flour': randint(30, 50), 
        'egg': randint(30, 50), 
        'cucumber': randint(30, 50), 
        'leaf': randint(30, 50)
    }
    def __init__(self):
        pass

    def get_ingredients(self):
        return self.POSSIBLE_INGS

class Waiter:
    def __init__(self):
        pass

    def get_order(self, order):
        pass

    def bring_order(self):
        pass

class Maitre:
    def __init__(self):
        pass

    def put_client_to_place(self):
        pass

    def call_waiter(self):
        pass


class Chef:
    def __init__(self):
        self.needed_ings = []

    def make_order(self, piece):
        self.needed_ings.append(piece)
        

    def create_menu(self, all_dishes, ingredients):
        menu = [dish for dish in all_dishes]
        for dish in all_dishes:
            for piece in all_dishes[dish]:
                if ingredients[piece] <= Ingredients.MAX_CAPACITY/3:
                    menu.remove(dish)
                    self.make_order(piece)
        return menu

    def cook(self, dish, ingredients):
        for ing in dish:
            ingredients[ing] -= 1


class Admin:
    def __init__(self, profit=0):
        self.profit = profit

    def call_dealers(self):
        print("Calling...")

    def pay_for_deal(self):
        print("Paying...")

    def choose_day_of_purchase(self):
        print("Choosing day...")

    def perform_order(self, needed_ings, ingredients):
        self.call_dealers()
        self.pay_for_deal()
        self.choose_day_of_purchase()
        for ing in needed_ings:
            ingredients[ing] = Ingredients.MAX_CAPACITY
        

    def calculate_profit(self):
        return self.profit

    def form_reserved_places_list(self):
        pass


class Client:
    def __init__(self, cash):
        self.cash = cash

    def make_order(self, menu):
        return choice(menu)

    def pay_for_order(self):
        return self.cash


class Restaurant:
    def __init__(self):
        self.hall = Hall()
        self.waiter = Waiter()
        self.maitre = Maitre()
        self.chef = Chef()
        self.admin = Admin()
        self.all_dishes = Dish().get_dishes()
        self.ingredients = Ingredients().get_ingredients()

        


    def client_serving(self, client):
        for place in self.hall.places:
            if not self.hall.places[place]:
                self.hall.places[place] = True

        self.maitre.put_client_to_place()
        self.maitre.call_waiter()

        self.waiter.get_order(client.make_order())
        self.waiter.bring_order()
        self.admin.profit += client.pay_for_order()

    def check_free_places(self):
        for place in self.hall.places:
            if not self.hall.places[place]:
                return True
        return False
        

    def normal_day(self):
        self.admin.profit = 0
        num_visitors = randint(30, 40)    # Generating some visitors
        clients = [Client(randint(20, 100)) for i in range(num_visitors)]
        

        # Dictionary with how many money made on each dish
        dish_money = {dish:0 for dish in self.all_dishes}
        # Menu should be generated by chef

        menu = self.chef.create_menu(self.all_dishes, self.ingredients)



        while clients:    # when we have people wanting to visit restaurant
            # Checking for free places
            free_places = self.check_free_places()
            if not free_places:   # Having some free place
                self.hall.places[randint(1, 20)] = False
            
            # Take random client
            client = choice(clients)

            dish = client.make_order(menu)
            self.chef.cook(dish, self.ingredients)
            dish_money[dish] += client.cash
            self.client_serving(client)
            clients.remove(client)

        # All clients go away
        for place in self.hall.places:
            self.hall.places[place] = False

        return self.admin.calculate_profit(), dish_money



print("Laboratory work 6.1\nWritten by Hennadii Kochev, IP-91")
print("Language: Python 3")

r = Restaurant()
profit, dish_money = r.normal_day()

for dish in dish_money:
    print(f"{dish}: {dish_money[dish]}")

print(f"Total profit for a day: {profit}")